---
# roles/mysql-percona-replication/tasks/main.yml

- name: Add apt keys required for Percona
  apt_key: url='http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1C4CBDCDCD2EFD2A'
  tags: mysql

- name: Add repos for Percona
  apt_repository: repo='deb http://repo.percona.com/apt wheezy main'
  tags: mysql

- name: Update the apt-get cache
  apt: update_cache=yes
  tags: mysql

- name: create mysql config directory
  file: path=/etc/mysql owner=root group=root mode=0755 state=directory
  tags: [mysql, mysql_config]

- name: Copy main database configuation file my.cnf
  template: src={{ files }}/etc/mysql/my.cnf.j2 dest=/etc/mysql/my.cnf
  tags: [mysql, mysql_config]

- name: Install packages
  action: apt pkg={{ item }} state=installed
  with_items:
    - percona-server-server-5.6
    - percona-server-client-5.6
    - percona-toolkit
    - percona-xtrabackup
  tags: [mysql, apt-mysql]
  register: pkg_install

#- name: outut stuff
#  debug: var=pkg_install
#  tags: [mysql, apt-mysql]

- name: remove existing .my.cnf files for initial install
  file: path=/root/.my.cnf state=absent
  ignore_errors: yes
  when: pkg_install.changed == true
  tags: [mysql, apt-mysql]

- name: Update mysql root password for all root accounts.
  mysql_user: name=root host={{ item }} password={{ mysql_root_db_pass }}
  with_items:
    - "{{ ansible_hostname }}"
    - "{{ inventory_hostname }}"
    - 127.0.0.1
    - ::1
    - localhost
  tags: mysql

- name: Copy .my.cnf file
  template: src={{ files }}/root/.my.cnf.j2 dest=/root/.my.cnf mode=0600
  tags: [mysql, mysql_config]

- name: Copy .my.cnf-mysqladmin file
  template: src={{ files }}/root/.my.cnf-mysqladmin.j2 dest=/root/.my.cnf-mysqladmin mode=0600
  tags: [mysql, mysql_config, mysqladmin_user]

- name: ensure anonymous users are not in the database
  mysql_user: name='' host={{ item }} state=absent
  with_items:
    - localhost
    - "{{ inventory_hostname }}"
  tags: mysql

- name: remove the test database
  mysql_db: name=test state=absent
  tags: mysql

#- name: Ensure the hostname entry for master is available for the client.
#  lineinfile: dest=/etc/hosts regexp="{{ mysql_repl_master }}" line="{{ hostvars[mysql_repl_master].ansible_default_ipv4.address + ' ' + mysql_repl_master }}" state=present
#  when: mysql_repl_role == 'slave' and mysql_repl_master is defined
#  tags: [mysql, repl, ztz]

#- name: Ensure the hostname entry for the slave is entered into hosts file
#  lineinfile: dest=/etc/hosts regexp="{{ item }}" line="{{ hostvars[item].ansible_default_ipv4.address + ' ' + item }}" state=present
#  with_items: mysql_repl_slave
#  when: mysql_repl_role == 'master' and mysql_repl_slave is defined
#  tags: [mysql, repl, ztz]

#- name: Create the replication user on the master
#  mysql_user: name={{ mysql_repl_creds.username }}  host="{{ item }}" password={{ mysql_repl_creds.password|default("password") }} priv=*.*:"REPLICATION SLAVE" state=present
#  with_items: mysql_repl_slave
#  when: mysql_repl_role == 'master'
#  tags: [mysql, repl]

- name: Create the mysqladmin user mysql server monitoring on slave
  mysql_user: name={{ mysql_admin_user.username }}  host="{{ item }}" password={{ mysql_admin_user.password|default("password") }} priv=*.*:"SUPER,PROCESS" state=present
  # comment out line above and uncomment line below to change the mysqladmin user password
  #mysql_user: name={{ mysql_admin_user.username }}  host="{{ item }}" password={{ mysql_admin_user.password }}
  with_items:
    - localhost
    - "{{ inventory_hostname }}"
    - "monitor.easypress.ca"
  when: mysql_repl_role == 'slave'
  tags: [mysql, repl, mysqladmin_user]

- name: Create the mysqladmin user for replication monitoring on master
  mysql_user: name={{ mysql_admin_user.username }}  host="{{ item }}" password={{ mysql_admin_user.password|default("password") }} priv=*.*:"SUPER,PROCESS" state=present
  # comment out line above and uncomment line below to change the mysqladmin user password
  #mysql_user: name={{ mysql_admin_user.username }}  host="{{ item }}" password={{ mysql_admin_user.password }}
  with_items:
    - localhost
    - "{{ inventory_hostname }}"
    - "{{ mysql_repl_slave }}"
    - "{{ hostvars[mysql_repl_slave].ansible_default_ipv4.address }}"
    - "monitor.easypress.ca"
  when: mysql_repl_role == 'master'
  tags: [mysql, repl, mysqladmin_user]

- name: copy replication check script
  template: src={{ files }}/usr/local/sbin/check_mysql_replication_status.sh.j2 dest=/usr/local/sbin/check_mysql_replication_status.sh owner=root group=staff mode=0750
  when: mysql_repl_role == 'slave'
  tags: [mysql, repl, mysqladmin_user, repl_check_replication]

#- name: reset permissions on SSL key
#  file: path=/etc/ssl/easypress/{{ inventory_hostname}}.key owner=root group=mysql mode=0640
#  tags: [mysql, ssl]
#
#- name: Check if slave is already configured for replication
#  mysql_replication: mode=getslave
#  ignore_errors: true
#  register: slave
#  when: mysql_repl_role == 'slave' and mysql_repl_master is defined
#  tags: [mysql, repl]
#
#- name: Get the current master servers replication status
#  mysql_replication: mode=getmaster
#  delegate_to: "{{ mysql_repl_master }}"
#  register: repl_stat
#  when: slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined
#  tags: [mysql, repl]
#
#- name: Change the master in slave to start the replication
#  mysql_replication: mode=changemaster master_host={{ mysql_repl_master }} master_log_file={{ repl_stat.File }} master_log_pos={{ repl_stat.Position }} master_user={{ mysql_repl_creds.username }} master_password={{ mysql_repl_creds.password }} master_ssl=1 master_ssl_ca=/etc/ssl/easypress/root_CA.pem master_ssl_cert=/etc/ssl/easypress/{{ inventory_hostname }}.pem master_ssl_key=/etc/ssl/easypress/{{ inventory_hostname }}.key
#  when: slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined
#  ignore_errors: True
#  tags: [mysql, repl]
#
#- name: Start slave
#  mysql_replication: mode=startslave
#  when: mysql_repl_role == 'slave' and mysql_repl_master is defined
#  tags: [mysql, repl]

- name: Copy webstats DB table structure to server
  copy: src={{ files }}/etc/mysql/webstats.sql dest=/tmp
  when: mysql_repl_role == 'master'
  tags: [webstats-db, mysql]

- name: Create webstats user
  mysql_user: name={{ mysql_webstats.username }} host="localhost" password={{ mysql_webstats.password }} priv=*.*:"ALL" state=present
  when: mysql_repl_role == 'master'
  tags: [webstats-db, mysql]

- name: Create webstats DB
  mysql_db: name={{ mysql_webstats.db }} state=present
  when: mysql_repl_role == 'master'
  tags: [webstats-db, mysql]

- name: Create webstats tables
  mysql_db: name={{ mysql_webstats.db }} state=import target=/tmp/webstats.sql
  when: mysql_repl_role == 'master'
  tags: [webstats-db, mysql]

